version: 2.1

orbs:
  aws-s3: circleci/aws-s3@1.0.4

jobs:
  prepare dependencies cache:
    docker:
      - image: node:10
    steps:
      - checkout
      - restore_cache:
          key: cms-hitech-apd-npm-{{ checksum "web/package-lock.json" }}-{{ checksum "api/package-lock.json" }}
      - run:
          name: install web dependencies
          working_directory: ~/project/web
          command: npm ci
      - run:
          name: install api dependencies
          working_directory: ~/project/api
          command: npm ci
      - save_cache:
          key: cms-hitech-apd-npm-{{ checksum "web/package-lock.json" }}-{{ checksum "api/package-lock.json" }}
          paths:
            - /root/.npm
      - save_cache:
          key: v1-cms-hitech-apd-{{ checksum "web/package-lock.json" }}
          paths:
            - web/node_modules
      - save_cache:
          key: v1-cms-hitech-api-{{ checksum "api/package-lock.json" }}
          paths:
            - api/node_modules

  yaml test:
    docker:
      - image: node:10
    steps:
      - checkout
      - run: npm install glob
      - run: npm install js-yaml
      - run: 
          working_directory: ~/project/web
          command: node yaml-tests.js

  check docker-compose image tags:
    docker:
      - image: node:10
    steps:
      - checkout
      - run:
          name: check docker-compose image tags
          working_directory: ~/project
          command: |
            echo "`cat docker-compose.yml | grep -m1 cms-eapd/api: | sed 's/.*image: cms-eapd\/api://'` api/package-lock.json" > hashes.md5
            echo "`cat docker-compose.yml | grep -m1 cms-eapd/web: | sed 's/.*image: cms-eapd\/web://'` web/package-lock.json" >> hashes.md5
            md5sum -c hashes.md5

  web dependency vulnerability scan:
    docker:
      - image: node:10
    steps:
      - checkout
      - restore_cache:
          key: v1-cms-hitech-apd-{{ checksum "web/package-lock.json" }}
      - run:
          name: vulnerability scan
          working_directory: ~/project/web
          command: |
            npx snyk auth $SNYK_TOKEN
            npx snyk test

  web lint:
    docker:
      - image: node:10
    steps:
      - checkout
      - restore_cache:
          key: v1-cms-hitech-apd-{{ checksum "web/package-lock.json" }}
      - run:
          name: run linter
          working_directory: ~/project/web
          command: npm run lint

  web test:
    docker:
      - image: node:10
    steps:
      - checkout
      - restore_cache:
          key: v1-cms-hitech-apd-{{ checksum "web/package-lock.json" }}
      - run:
          name: run tests
          working_directory: ~/project/web
          command: npm test -- --runInBand
      - run:
          name: report coverage
          when: always
          working_directory: ~/project/web
          command: bash <(curl -s https://codecov.io/bash)

  validate openapi:
    docker:
      - image: circleci/node:10
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: save OpenAPI JSON
          command: node -e "console.log(JSON.stringify(require('./api/routes/openAPI/index.js')))" > openapi.json
      - run:
          name: validate
          command: |
            docker create -v /openapi --name openapi alpine /bin/true
            docker cp ./openapi.json openapi:/openapi
            docker run --volumes-from openapi -w /openapi usabillabv/openapi3-validator openapi.json

  api dependency vulnerability scan:
    docker:
      - image: node:10
    steps:
      - checkout
      - restore_cache:
          key: v1-cms-hitech-api-{{ checksum "api/package-lock.json" }}
      - run:
          name: vulnerability scan
          working_directory: ~/project/api
          command: |
            npx snyk auth $SNYK_TOKEN
            npx snyk test

  api lint:
    docker:
      - image: node:10
    steps:
      - checkout
      - restore_cache:
          key: v1-cms-hitech-api-{{ checksum "api/package-lock.json" }}
      - run:
          name: run linter
          working_directory: ~/project/api
          command: npm run lint

  api unit test:
    docker:
      - image: node:10
    steps:
      - checkout
      - restore_cache:
          key: v1-cms-hitech-api-{{ checksum "api/package-lock.json" }}
      - run:
          name: run tests
          working_directory: ~/project/api
          command: npm test
      - run:
          name: report coverage
          when: always
          working_directory: ~/project/api
          command: bash <(curl -s https://codecov.io/bash)

  api endpoint test:
    docker:
      - image: node:10
        environment:
          - NODE_ENV=test
          - STORE_TYPE=fs
          - STORE_PATH=test-data/files
          - ENDPOINT_COVERAGE_CAPTURE=yes
      - image: postgres:latest
        name: db
        environment:
          - POSTGRES_USER=postgres
          - POSTGRES_PASSWORD=cms
          - POSTGRES_DB=hitech_apd_test

    steps:
      - checkout
      - restore_cache:
          key: v1-cms-hitech-api-{{ checksum "api/package-lock.json" }}
      - run:
          name: get wait-on
          command: |
            npm i -g wait-on
      - run:
          name: wait for database
          command: wait-on tcp:db:5432 -t 300000
      - run:
          name: database migration
          working_directory: ~/project/api
          command: npm run migrate
      - run:
          name: database seed
          working_directory: ~/project/api
          command: npm run seed
      - run:
          name: start the API
          working_directory: ~/project/api
          command: echo "[]" > endpoint-data.json && npm start
          background: true
      - run:
          name: wait for API
          command: wait-on tcp:localhost:8000 -t 300000
      - run:
          name: run tests
          working_directory: ~/project/api
          command: npm run test-endpoints
      - run:
          name: print coverage info
          working_directory: ~/project/api
          command: mv endpoint-data.json endpoint-tests && node endpoint-tests/endpoint-coverage.js

  build frontend:
    docker:
      - image: node:10
    steps:
      - checkout
      - restore_cache:
          key: v1-cms-hitech-apd-{{ checksum "web/package-lock.json" }}
      - run:
          name: build the web app
          working_directory: ~/project/web
          command: API_URL=$PROD_API_URL npm run build
      - persist_to_workspace:
          root: .
          paths:
            - web/dist

  deploy prod frontend:
    docker:
      - image: python:3
    steps:
      - attach_workspace:
          at: /tmp
      - run:
          name: create build artifact zip
          command: |
            apt-get update
            apt-get install zip -y
            zip -r /tmp/webapp.zip /tmp/dist/*
      - aws-s3/sync:
          from: /tmp/dist
          to: 's3://$STAGING_S3_BUCKET'
          arguments: |
            --delete
      - store_artifacts:
          path: /tmp/webapp.zip
          destination: build

  deploy prod backend:
    docker:
      - image: node:10
    steps:
      - run:
          name: 'noop'
          command: 'true'

  deploy staging:
    docker:
      - image: node:10
    steps:
      - checkout
      - restore_cache:
          key: cms-hitech-apd-npm-{{ checksum "web/package-lock.json" }}-{{ checksum "api/package-lock.json" }}
      - run:
          name: deploy to prod
          command: ./bin/deploy.sh
      - store_artifacts:
          path: /tmp/webapp.zip
          destination: build

  deploy pr:
    docker:
      - image: node:10
    steps:
      - checkout
      - run:
          name: deploy for pull request
          command: ./bin/deploy-pr.sh

  cleanup PR-specific deploys:
    docker:
      - image: node:10
    steps:
      - checkout
      - run:
          name: run nightly script
          command: ./bin/cleanup-pr-deploys.sh

workflows:
  version: 2
  cleanup:
    triggers:
      - schedule:
          cron: '0 0,2,4,6,8,10,12,14,16,18,20,22 * * *'
          filters:
            branches:
              only:
                - master
    jobs:
      - cleanup PR-specific deploys
  web:
    jobs:
      - prepare dependencies cache
      # - check docker-compose image tags
      # - web dependency vulnerability scan:
      #     requires:
      #       - prepare dependencies cache
      # - web lint:
      #     requires:
      #       - prepare dependencies cache
      # - yaml test
      # - web test:
      #     requires:
      #       - prepare dependencies cache
      #       - yaml test
      # - validate openapi:
      #     requires:
      #       - prepare dependencies cache
      # - api dependency vulnerability scan:
      #     requires:
      #       - prepare dependencies cache
      # - api lint:
      #     requires:
      #       - prepare dependencies cache
      # - api unit test:
      #     requires:
      #       - prepare dependencies cache
      # - api endpoint test:
      #     requires:
      #       - prepare dependencies cache
      # - deploy pr:
      #     filters:
      #       branches:
      #         ignore:
      #           - master
      #     requires:
      #       - web dependency vulnerability scan
      #       - yaml test
      - build frontend:
          requires:
            - prepare dependencies cache
      - deploy prod frontend:
          requires:
            - build frontend
            # - web test
            # - web dependency vulnerability scan
      # - deploy staging:
      #     filters:
      #       branches:
      #         only:
      #           - master
      #     requires:
      #       - web test
      #       - web dependency vulnerability scan
      #       - api unit test
      #       - api endpoint test
      #       - api dependency vulnerability scan
